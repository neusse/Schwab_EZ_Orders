"""
Environment Setup Example for EZ Schwab Orders

This script helps you set up environment variables for secure credential management.
Run this script to generate the exact commands you need to set up your environment.
"""

import os
from pathlib import Path

def check_current_env():
    """Check what environment variables are currently set"""
    print("üîç Current Environment Status")
    print("=" * 35)
    
    env_vars = {
        'SCHWAB_API_KEY': os.getenv('SCHWAB_API_KEY'),
        'SCHWAB_APP_SECRET': os.getenv('SCHWAB_APP_SECRET'),
        'SCHWAB_TOKEN_PATH': os.getenv('SCHWAB_TOKEN_PATH'),
        'SCHWAB_CALLBACK_URL': os.getenv('SCHWAB_CALLBACK_URL')
    }
    
    for var, value in env_vars.items():
        if value:
            # Mask the value for security
            masked = value[:4] + '*' * (len(value) - 8) + value[-4:] if len(value) > 8 else '*' * len(value)
            print(f"‚úÖ {var}: {masked}")
        else:
            print(f"‚ùå {var}: Not set")
    
    required_set = env_vars['SCHWAB_API_KEY'] and env_vars['SCHWAB_APP_SECRET'] and env_vars['SCHWAB_TOKEN_PATH']
    
    if required_set:
        print("\nüéâ All required variables are set!")
        print("You can use: from schwab_integration_example import create_trader_from_env")
        print("             trader = create_trader_from_env()")
        return True
    else:
        print("\n‚ö†Ô∏è  Required variables missing")
        return False

def generate_setup_commands():
    """Generate the setup commands for different shells"""
    print("\nüîß Environment Variable Setup")
    print("=" * 35)
    
    # Get user input
    print("Enter your Schwab API credentials:")
    api_key = input("API Key: ").strip()
    app_secret = input("App Secret: ").strip()
    token_path = input("Token file path (default: schwab_token.json): ").strip() or "schwab_token.json"
    callback_url = input("Callback URL (default: https://localhost:8080): ").strip() or "https://localhost:8080"
    
    print("\nüìã Commands to Set Environment Variables")
    print("=" * 45)
    
    # Bash/Zsh commands
    print("\nüêö For Bash/Zsh (Linux/Mac):")
    print("Add these to ~/.bashrc or ~/.zshrc:")
    print(f"export SCHWAB_API_KEY='{api_key}'")
    print(f"export SCHWAB_APP_SECRET='{app_secret}'")
    print(f"export SCHWAB_TOKEN_PATH='{token_path}'")
    print(f"export SCHWAB_CALLBACK_URL='{callback_url}'")
    
    # PowerShell commands
    print("\nü™ü For PowerShell (Windows):")
    print("Run these commands:")
    print(f"$env:SCHWAB_API_KEY='{api_key}'")
    print(f"$env:SCHWAB_APP_SECRET='{app_secret}'")
    print(f"$env:SCHWAB_TOKEN_PATH='{token_path}'")
    print(f"$env:SCHWAB_CALLBACK_URL='{callback_url}'")
    
    # Permanent Windows setup
    print("\nüîí For Permanent Windows Setup:")
    print("Run these in PowerShell as Administrator:")
    print(f"[Environment]::SetEnvironmentVariable('SCHWAB_API_KEY', '{api_key}', 'User')")
    print(f"[Environment]::SetEnvironmentVariable('SCHWAB_APP_SECRET', '{app_secret}', 'User')")
    print(f"[Environment]::SetEnvironmentVariable('SCHWAB_TOKEN_PATH', '{token_path}', 'User')")
    print(f"[Environment]::SetEnvironmentVariable('SCHWAB_CALLBACK_URL', '{callback_url}', 'User')")
    
    # Docker/Compose
    print("\nüê≥ For Docker Compose:")
    print("Add to your docker-compose.yml environment section:")
    print("environment:")
    print(f"  - SCHWAB_API_KEY={api_key}")
    print(f"  - SCHWAB_APP_SECRET={app_secret}")
    print(f"  - SCHWAB_TOKEN_PATH={token_path}")
    print(f"  - SCHWAB_CALLBACK_URL={callback_url}")
    
    # .env file
    print("\nüìÑ For .env file (with python-dotenv):")
    print("Create a .env file with:")
    print(f"SCHWAB_API_KEY={api_key}")
    print(f"SCHWAB_APP_SECRET={app_secret}")
    print(f"SCHWAB_TOKEN_PATH={token_path}")
    print(f"SCHWAB_CALLBACK_URL={callback_url}")

def create_env_file():
    """Create a .env file for the user"""
    print("\nüìÑ Creating .env File")
    print("=" * 25)
    
    env_file = Path(".env")
    if env_file.exists():
        overwrite = input(".env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Skipping .env file creation")
            return
    
    print("Enter your Schwab API credentials:")
    api_key = input("API Key: ").strip()
    app_secret = input("App Secret: ").strip()
    token_path = input("Token file path (default: schwab_token.json): ").strip() or "schwab_token.json"
    callback_url = input("Callback URL (default: https://localhost:8080): ").strip() or "https://localhost:8080"
    
    env_content = f"""# Schwab API Configuration
# Generated by EZ Schwab Orders setup

SCHWAB_API_KEY={api_key}
SCHWAB_APP_SECRET={app_secret}
SCHWAB_TOKEN_PATH={token_path}
SCHWAB_CALLBACK_URL={callback_url}

# To use this file, install python-dotenv:
# pip install python-dotenv
# Then in your Python code:
# from dotenv import load_dotenv
# load_dotenv()
"""
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"‚úÖ Created {env_file}")
    print("\nüí° To use this .env file:")
    print("1. Install python-dotenv: pip install python-dotenv")
    print("2. Add to your Python script:")
    print("   from dotenv import load_dotenv")
    print("   load_dotenv()")
    print("   # Now environment variables are loaded")

def test_setup():
    """Test the current environment setup"""
    print("\nüß™ Testing Current Setup")
    print("=" * 30)
    
    try:
        # Test imports
        from schwab_integration_example import check_env_setup, create_trader_from_env
        print("‚úÖ Modules imported successfully")
        
        # Check environment
        env_status = check_env_setup()
        required_vars = ['SCHWAB_API_KEY', 'SCHWAB_APP_SECRET', 'SCHWAB_TOKEN_PATH']
        all_set = all(env_status[var] for var in required_vars)
        
        if all_set:
            print("‚úÖ All required environment variables are set")
            
            # Try to create trader (will fail without real credentials)
            try:
                trader = create_trader_from_env()
                print("‚úÖ Trader created successfully!")
                print("üéâ Setup is complete and working!")
            except Exception as e:
                print(f"‚ö†Ô∏è  Trader creation failed: {e}")
                print("This is expected if you don't have real Schwab credentials yet")
                print("‚úÖ Environment setup is correct")
        else:
            print("‚ùå Missing required environment variables")
            missing = [var for var in required_vars if not env_status[var]]
            print(f"   Missing: {', '.join(missing)}")
            
    except ImportError as e:
        print(f"‚ùå Import failed: {e}")
        print("Make sure all EZ Schwab Orders files are in the current directory")

def main():
    """Main setup function"""
    print("üöÄ EZ Schwab Orders - Environment Setup Helper")
    print("=" * 50)
    print("This script helps you set up environment variables for secure credential management.\n")
    
    # Check current status
    if check_current_env():
        print("\nSetup appears to be complete!")
        choice = input("\nWhat would you like to do?\n1. Test setup\n2. Reconfigure\n3. Exit\nChoice (1-3): ").strip()
        
        if choice == "1":
            test_setup()
        elif choice == "2":
            generate_setup_commands()
        else:
            print("Goodbye!")
            return
    else:
        print("\nWhat would you like to do?")
        print("1. Generate shell commands")
        print("2. Create .env file")
        print("3. Both")
        print("4. Test current setup")
        
        choice = input("\nChoice (1-4): ").strip()
        
        if choice == "1":
            generate_setup_commands()
        elif choice == "2":
            create_env_file()
        elif choice == "3":
            generate_setup_commands()
            create_env_file()
        elif choice == "4":
            test_setup()
        else:
            print("Invalid choice")
            return
    
    print("\n" + "=" * 50)
    print("üéØ Next Steps:")
    print("1. Set the environment variables using one of the methods above")
    print("2. Restart your terminal/IDE to pick up the new variables")
    print("3. Test with: python setup_env_example.py")
    print("4. Start trading with:")
    print("   from schwab_integration_example import create_trader_from_env")
    print("   trader = create_trader_from_env()")
    print("   trader.paper_trade_mode(True)  # Safe testing")

if __name__ == "__main__":
    main()
